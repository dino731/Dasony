<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="event">
	<resultMap type="Event" id="eventMap">
		<id column="event_no" property="no" />
		<result column="event_title" property="title" />
		<result column="event_content" property="content" />
		<result column="event_start_date" property="startDate" />
		<result column="event_end_date" property="endDate" />
		<result column="event_winner_date" property="winnerDate" />
		<result column="event_thumbnail" property="thumbnail" />
		<result column="event_video_link" property="videoLink" />
		<result column="event_detail_link" property="detailLink" />
		<result column="event_page" property="pageLink" />
		<result column="event_upload_date" property="uploadDate" />
		<result column="event_category" property="eventCategory" />
		<result column="event_win_time" property="winTime" />
	</resultMap>
	
	<resultMap type="Reward" id="rewardMap">
		<id column="event_reward_no" property="rewardNo" />
		<result column="event_reward_name" property="rewardName" />
		<result column="event_reward_brand" property="brand" />
		<result column="event_reward_range_cate" property="rewardRange" />
		<result column="event_reward_category" property="rewardCategory" />
		<result column="event_rank" property="rank" />
		<result column="event_reward_amount" property="amount" />
		<result column="event_no" property="eventNo" />
	</resultMap>
	
	<resultMap type="EventJoin" id="joinMap">
		<result column="user_name" property="userName" />
		<result column="count" property="count" />
		<result column="check_status" property="tdyCheck" />
	</resultMap>

	<select id="selectAllEvent" parameterType="hashmap" resultMap="eventMap">
		select event_no, event_title, event_end_date, event_upload_date, event_page, event_category, event_thumbnail
		from (select event_no, event_title, event_end_date, event_upload_date, event_page, event_category, event_thumbnail,
				case when sysdate > event_end_date then '종료' else '진행' end status
			  from event left join event_code_list using(event_no) 
			  			 left join event_code using(event_cate_code) where event_deleted = 'N' )
		where 1=1
		<if test="category != null and category!='카테고리'">
			and event_category = #{category}
		</if>
		<if test="status != null and status != '선택'">
			and status = #{status}
		</if>
		order by event_no desc
	</select>
	
	<select id="selectEvent" parameterType="String" resultMap="eventMap">
		select event_no, event_title, event_content, event_start_date, event_end_date, event_end_date,
			event_winner_date, event_thumbnail, event_video_link, event_detail_link, event_page, 
			event_upload_date, event_category, event_win_time 
		from event left join event_code_list using(event_no) left join event_code using(event_cate_code)
			left join event_win_cate_list using(event_no) left join event_win_category using(event_win_time_code)
		where event_deleted = 'N' and event_no=#{no}
	</select>
	
	<select id="selectReward" parameterType="String" resultMap="rewardMap">
		select event_reward_no, event_reward_name, event_reward_brand, event_reward_range_cate,
			event_reward_category, event_no, event_rank, event_reward_amount
		from event_reward left join event_range using(event_reward_range_code)
			left join event_reward_list using(event_reward_no)
		where event_no=#{no}
	</select>
	
	<update id="updateEventInfo" parameterType="Event">
		update event set event_title = #{title}, event_content = #{content}, event_start_date = #{startDate},
						event_end_date = #{endDate}, event_winner_date = #{winnerDate}, 
						event_thumbnail = #{thumbnail}, event_video_link = #{videoLink}, 
						event_detail_link = #{detailLink}, event_page = #{pageLink}
		where event_no = #{no}
	</update>
	
	<update id="updateEventCategory" parameterType="Event">
		<selectKey resultType="string" keyProperty="eventCategory" order="BEFORE">
			select event_cate_code from event_code where event_category = #{eventCategory}
		</selectKey>
		update event_code_list set event_cate_code = #{eventCategory} where event_no = #{no}
	</update>
	
	<update id="updateEventWinCategory" parameterType="Event">
		<selectKey resultType="string" keyProperty="winTime" order="BEFORE">
			select event_win_time_code from event_win_category where event_win_time=#{winTime}
		</selectKey>
		update event_win_cate_list set event_win_time_code = #{winTime} where event_no = #{no}
	</update>
	
	<update id="updateRewardInfo" parameterType="Reward">
		<selectKey resultType="String" keyProperty="rewardRange" order="BEFORE">
			select event_reward_range_code from event_range where event_reward_range_cate = #{rewardRange}
		</selectKey>
		update event_reward set event_reward_name = #{rewardName},
						event_reward_brand = #{brand}, event_reward_range_code = #{rewardRange},
						event_reward_category = #{rewardCategory}
		where event_reward_no = #{rewardNo}
	</update>
	
	<update id="updateEventRewardInfo" parameterType="Reward">
		update event_reward_list set event_rank = #{rank}, event_reward_amount = #{amount}
		where event_reward_no = #{rewardNo}
	</update>
	
	<insert id="insertEventInfo" parameterType="Event">
		<selectKey resultType="string" keyProperty="no" order="BEFORE">
			select 'E'||lpad(seq_eno.nextval, 4, 0) from dual
		</selectKey>
		insert into event(event_no, event_title, event_content, event_start_date, event_end_date,
						event_winner_date, event_thumbnail, event_video_link, event_detail_link,
						event_page, event_upload_date)
		values(#{no}, #{title}, #{content}, #{startDate}, #{endDate}, #{winnerDate},
				#{thumbnail}, #{videoLink}, #{detailLink}, #{pageLink}, sysdate)
	</insert>
	
	<insert id="insertEventCategory" parameterType="Event">
		<selectKey resultType="string" keyProperty="eventCategory" order="BEFORE">
			select event_cate_code from event_code where event_category = #{eventCategory}
		</selectKey>
		insert into event_code_list(event_no, event_cate_code)
		values(#{no}, #{eventCategory})
	</insert>
	
	<insert id="insertEventWinCategory" parameterType="Event">
		<selectKey resultType="string" keyProperty="winTime" order="BEFORE">
			select event_win_time_code from event_win_category where event_win_time=#{winTime}
		</selectKey>
		insert into event_win_cate_list(event_no, event_win_time_code)
		values(#{no}, #{winTime})
	</insert>
	
	<select id="changeRewardRange" parameterType="string" resultType="string">
		select event_reward_range_code from event_range where event_reward_range_cate=#{rewardRange}
	</select>
	
	<insert id="insertRewardInfo" parameterType="Reward">
		<!-- <selectKey resultType="string" keyProperty="rewardRange" order="BEFORE">
			select event_reward_range_code from event_range where event_reward_range_cate=#{rewardRange}
		</selectKey> -->
		insert into event_reward (event_reward_no, event_reward_name, event_reward_brand, event_reward_range_code,
								event_reward_category)
		values(seq_erno.nextval, #{rewardName}, #{brand}, #{rewardRange}, #{rewardCategory})
	</insert>
	
	<insert id="insertEventRewardInfo" parameterType="Reward">
		<selectKey resultType="string" keyProperty="eventNo" order="BEFORE">
			select 'E'||lpad(last_number-1, 4, 0) 
			from (select last_number from user_sequences where sequence_name = 'SEQ_ENO')
		</selectKey>
		insert into event_reward_list (event_no, event_reward_no, event_rank, event_reward_amount)
		values(#{eventNo}, seq_erno.currval, #{rank}, #{amount})
	</insert>
	
	<update id="deleteEvent" parameterType="string">
		update event set event_deleted = 'Y' where event_no = #{no}
	</update>
	
	<select id="selectMsgTarget" parameterType="string" resultType="int">
		SELECT user_no FROM event_join
			LEFT JOIN (
			    SELECT event_join_no, 'win' as win_yn FROM event_join
			    WHERE event_join_no IN (
			        SELECT event_join_no 
			        FROM event_winner )) a
			ON event_join.event_join_no = a.event_join_no
			where
			<choose>
				<when test="msgRange.equals('전체')">
					1=1
				</when>
				<otherwise>
					win_yn='win'
				</otherwise>
			</choose>
	</select>
	
	<insert id="sendMsg" parameterType="hashmap" >
		insert into alert values(seq_ano.nextval, #{target}, #{content}, TO_CHAR(SYSDATE, 'MM-DD HH24:MI'), 'E', 
		default, '[이벤트 공지]' || '  ' || #{title})
	</insert>
	
	<select id="checkEventJoin" parameterType="hashmap" resultType="int">
		select count(*) from event_join where event_no = #{eventNo} and user_no = #{userNo}
	</select>
	
	<insert id="joinEvent" parameterType="hashmap">
		insert into event_join values(#{eventNo} || #{userNo}, #{eventNo}, #{userNo}, sysdate)
	</insert>
	
	<select id="loadLogin" parameterType="hashmap" resultMap="joinMap">
		select user_name, "check_status", count(*) count from (select e.*, user_name, 
				case when to_char(event_join_date, 'YYYY-MM-DD') = to_char(sysdate, 'YYYY-MM-DD') 
                     then 'Y' else 'N' end "check_status"
		from event_join e left join member m on e.user_no = m.user_no
		where event_no = #{eventNo} and e.user_no = #{userNo})
		group by user_name, "check_status"
	</select>
	
	<select id="memberLoginInfo" parameterType="hashmap" resultMap="joinMap">
		select user_no, user_name from member where user_no = #{userNo}
	</select>
	
	<select id="findLast" parameterType="hashmap" resultType="int" >
		<!-- select substr(event_join_no, instr(event_join_no, '_', -1)+1, 1) lastindex from (select * from event_join 
			    where event_join_no like '%'|| #{eventNo} || #{loginUserNo} ||'%' order by event_join_no desc)
			where rownum = 1 -->
		select count(*) count 
		from event_join 
		where event_join_no like '%'|| #{eventNo} || #{loginUserNo} ||'%' order by event_join_no desc
	</select>
	
	<insert id="checkTdyLogin" parameterType="hashmap">
		<choose>
			<!-- <when test="lastNum!=null and !lastNum.equals('')">
				<choose>
					<when test="'E'.equals(lastNum)">
						insert into event_join values(#{eventNo} || #{loginUserNo} || '_2', 
							#{eventNo}, #{loginUserNo}, sysdate)
					</when>
					<otherwise>
						insert into event_join values(#{eventNo} || #{loginUserNo} || '_' || (to_number(#{lastNum})+1),
							#{eventNo}, #{loginUserNo}, sysdate)
					</otherwise>
				</choose>
			</when> -->
			<when test="lastNum > 0">
				insert into event_join values(#{eventNo} || #{loginUserNo} || '_' || ${lastNum +1}),
						#{eventNo}, #{loginUserNo}, sysdate)
			</when>
			<otherwise>
				insert into event_join values(#{eventNo} || #{loginUserNo}, #{eventNo}, #{loginUserNo}, sysdate)
			</otherwise>
		</choose>
	</insert>
	
	<select id="getMyEventList" parameterType="int" resultMap="eventMap">
    SELECT *
    FROM EVENT E
    JOIN EVENT_JOIN EJ ON E.EVENT_NO = EJ.EVENT_NO 
    WHERE USER_NO = #{userNo}
</select>

</mapper>
